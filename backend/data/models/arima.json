{
  "id": "arima",
  "name": "ARIMA",
  "aliases": [],
  "category": "Time Series",
  "tags": [
    "time-series",
    "forecasting",
    "arima"
  ],
  "level": "beginner",
  "summary": "Classical linear model for differenced stationary series combining autoregression and moving average components.",
  "app_scenarios": [
    "Demand forecasting",
    "Econometrics"
  ],
  "math": {
    "core_formula": "\\phi(B)(1-B)^d y_t = \\theta(B)\\varepsilon_t",
    "derivation": [],
    "assumptions": [],
    "constraints": [],
    "variants": [
      "SARIMA",
      "ARIMAX"
    ]
  },
  "hyperparameters": [],
  "data_requirements": {
    "input": "Stationarity (after differencing); ACF/PACF diagnostics",
    "scale_sensitivity": "",
    "missing_values": ""
  },
  "required_columns": [
    {"role":"time","canonical":"time","aliases":["t","ds"],"dtype":"number","description":"Time index"},
    {"role":"value","canonical":"value","aliases":["y"],"dtype":"number","description":"Series value"}
  ],
  "code": {
    "python_sklearn": "import pandas as pd\nfrom statsmodels.tsa.arima.model import ARIMA\n\ndf = pd.read_csv('data.csv')\ny = df['value']\nmodel = ARIMA(y, order=(1,0,0)).fit()\nforecast = model.forecast(steps=5)\nprint(forecast)\npd.DataFrame({'forecast':forecast}).to_csv('result.csv',index=False)"
  },
  "usage": {
    "workflow": [
      "Check stationarity (ADF/KPSS)",
      "Difference until stationary (d)",
      "Use ACF/PACF to suggest p,q",
      "Fit ARIMA(p,d,q), validate residual whiteness",
      "Forecast with intervals"
    ],
    "examples": []
  },
  "evaluation": {
    "metrics": [
      "MAE",
      "RMSE",
      "MAPE",
      "AIC/BIC"
    ],
    "validation": "Time-series CV (rolling origin)",
    "baselines": [
      "Naive (random walk)",
      "Seasonal naive"
    ]
  },
  "strengths": [
    "Classical, interpretable",
    "Good for short-term stationary series"
  ],
  "weaknesses": [
    "Needs stationarity",
    "Limited for complex seasonality"
  ],
  "pitfalls": [
    "Mis-specification without stationarity check",
    "Ignoring seasonality -> use SARIMA"
  ],
  "comparisons": [
    {
      "with": "Prophet",
      "differences": [
        "ARIMA is linear and requires stationarity; Prophet handles trend/seasonality explicitly"
      ]
    }
  ],
  "visualizations": [
    "ACF/PACF plots",
    "forecast vs actual",
    "ACF/PACF",
    "Forecast vs actual"
  ],
  "references": [
    {
      "title": "https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average",
      "url": "https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average",
      "type": "docs"
    },
    {
      "title": "https://www.statsmodels.org/stable/generated/statsmodels.tsa.arima.model.ARIMA.html",
      "url": "https://www.statsmodels.org/stable/generated/statsmodels.tsa.arima.model.ARIMA.html",
      "type": "docs"
    }
  ],
  "related": [
    "statsmodels",
    "pandas",
    "numpy"
  ],
  "last_updated": "2025-08-24"
}