"use client";

import TablePreview from "@/app/components/ui/TablePreview";

interface TablePreviewData {
  name: string;
  preview: any[];
}

interface RunResultProps {
  stdout?: string;
  stderr?: string;
  images?: string[];
  tables?: TablePreviewData[];
}

export default function RunResult({ stdout, stderr, images, tables }: RunResultProps) {
  if (!stdout && !stderr && (!images || images.length === 0) && (!tables || tables.length === 0)) {
    return null;
  }

  const resolveImageSrc = (img: string) => {
    if (img.startsWith("http")) {
      return img;
    }
    if (img.startsWith("/outputs")) {
      return `${process.env.NEXT_PUBLIC_API_BASE}${img}`;
    }
    return `data:image/png;base64,${img}`;
  };

  return (
    <div className="mt-4 bg-gray-100 rounded-lg p-4 space-y-6">
      <h3 className="font-semibold">Execution Result</h3>

      {/* Stdout */}
      {stdout && (
        <div>
          <h4 className="font-medium">Stdout</h4>
          <p className="text-xs text-gray-600 mb-1">
            Printed output from your script (e.g., model results, debug logs).
          </p>
          <pre className="bg-gray-200 text-black rounded-lg p-2 overflow-x-auto whitespace-pre-wrap">
            <code>{stdout}</code>
          </pre>
        </div>
      )}

      {/* Stderr */}
      {stderr && (
        <div>
          <h4 className="font-medium text-red-600">Stderr</h4>
          <p className="text-xs text-gray-600 mb-1">
            Error messages or warnings if the script failed or input data was invalid.
          </p>
          <pre className="bg-red-100 text-red-800 rounded-lg p-2 overflow-x-auto whitespace-pre-wrap">
            <code>{stderr}</code>
          </pre>
        </div>
      )}

      {/* Tables */}
      {tables && tables.length > 0 && (
        <div>
          <h4 className="font-medium">CSV Preview</h4>
          <p className="text-xs text-gray-600 mb-1">
            First 10 rows of CSV files uploaded or generated by your script.
          </p>
          {tables.map((t) => (
            <TablePreview key={t.name} name={t.name} preview={t.preview} />
          ))}
        </div>
      )}

      {/* Images */}
      {images && images.length > 0 && (
        <div>
          <h4 className="font-medium">Images</h4>
          <p className="text-xs text-gray-600 mb-1">
            Plots or visualizations saved with <code>plt.savefig(...)</code>.
          </p>
          <div className="flex flex-wrap gap-4 mt-2">
            {images.map((url, i) => (
              <img
                key={i}
                src={resolveImageSrc(url)}
                alt={`Execution plot ${i + 1}`}
                className="rounded-lg border shadow max-h-60"
              />
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
